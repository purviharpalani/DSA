/******************************************************************************
This approach takes 
Time complexity = O(N)
and a lot of space as each level is stored
So this is not preferred, however the recursive solution is much faster and hence much preferred
*******************************************************************************/

#include<bits/stdc++.h>

using namespace std;

struct Node{
    Node* left;
    int data;
    Node* right;
    
    Node(int val){
        data = val;
        left = right = NULL;
    }
};

vector<vector<int>> view(Node* root){
    vector<vector<int>> ans;
    queue<Node*> q;
    if(root==NULL) return ans;
    
    q.push(root);
    while(!q.empty()){
        int size = q.size();
        vector<int> level;
        for(int i = 0; i<size;i++){
            Node* node = q.front();
            q.pop();
            level.push_back(node->data);
            if(node->left) q.push(node->left);
            if(node->right) q.push(node->right);
        }
        ans.push_back(level);
    }
    return ans;
    
}
    
int main()
{
    struct Node* root = new Node(1);
    root->left = new Node(2);
    root->left->left = new Node(4);
    root->left->right = new Node(5);
    root->left->right->left = new Node(6);
    root->right = new Node(3);
    root->right->right=new Node(7);
    vector<vector<int>> ans = view(root);
    vector<int> leftview, rightview;
    
    for(vector<int> vect: ans){
        leftview.push_back(vect[0]);
        rightview.push_back(vect[vect.size()-1]);
    }
    
    cout<<"Left view:"<<endl;
    for(auto i:leftview)
    cout<<i;
    
    cout<<endl<<"Right view:"<<endl;
    for(auto i: rightview)
    cout<<i;
    
    return 0;
    
}
